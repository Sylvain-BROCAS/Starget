
# -*- coding: utf-8 -*-
#
# -----------------------------------------------------------------------------
# telescope.py - Alpaca API responders for Telescope
#
# Author:   Your R. Name <your@email.org> (abc)
#
# -----------------------------------------------------------------------------
# Edit History:
#   Generated by Python Interface Generator for AlpycaDevice
#
# ??-???-????   abc Initial edit

from falcon import Request, Response, HTTPBadRequest, before
from logging import Logger
from shr import PropertyResponse, MethodResponse, PreProcessRequest, \
    StateValue, get_request_field, to_bool
from exceptions import *        # Nothing but exception classes
from telescopedevice import TelescopeDevice
from telescope_enum import *

logger: Logger

# ----------------------
# MULTI-INSTANCE SUPPORT
# ----------------------
# If this is > 0 then it means that multiple devices of this type are supported.
# Each responder on_get() and on_put() is called with a devnum parameter to indicate
# which instance of the device (0-based) is being called by the client. Leave this
# set to 0 for the simple case of controlling only one instance of this device type.
#
maxdev = 0                      # Single instance

# -----------
# DEVICE INFO
# -----------
# Static metadata not subject to configuration changes
## EDIT FOR YOUR DEVICE ##


class TelescopeMetadata:
    """ Metadata describing the Telescope Device. Edit for your device"""
    Name: str = 'Starget'
    Version: str = '0'
    Description: str = 'Starget Mount'
    DeviceType: str = 'Telescope'
    # https://guidgenerator.com/online-guid-generator.aspx
    DeviceID: str = '2e03994e-dbca-44ca-a988-9e3b8c681d6a'
    Info: str = 'Alpaca Starget Device\nImplements ITelescope'
    MaxDeviceNumber: int = maxdev
    InterfaceVersion = 4  # ITelescopeV4 (Platform 7)


tel_dev: TelescopeDevice
# At app init not import :-)


def start_tel_device(logger: Logger):
    logger = logger
    global tel_dev
    tel_dev = TelescopeDevice(logger)


# --------------------
# RESOURCE CONTROLLERS
# --------------------


@before(PreProcessRequest(maxdev))
class action:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json


@before(PreProcessRequest(maxdev))
class commandblind:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json


@before(PreProcessRequest(maxdev))
class commandbool:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json


@before(PreProcessRequest(maxdev))
class commandstring:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json


@before(PreProcessRequest(maxdev))
class connect:
    def on_put(self, req: Request, resp: Response, devnum: int):
        try:
            # ------------------------
            tel_dev.Connect()
            # ------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Connect failed', ex)).json


@before(PreProcessRequest(maxdev))
class connected:
    def on_get(self, req: Request, resp: Response, devnum: int):
        try:
            # -------------------------------------
            is_connecting: bool = tel_dev.connected
            # -------------------------------------
            resp.text = PropertyResponse(is_connecting, req).json
        except Exception as ex:
            resp.text = MethodResponse(req, DriverException(
                0x500, 'Telescope.Connected failed', ex)).json
    def on_put(self, req: Request, resp: Response, devnum: int):
        conn_str = get_request_field('Connected', req)
        conn = to_bool(conn_str)              # Raises 400 Bad Request if str to bool fails

        try:
            # ----------------------
            tel_dev.connected = conn
            # ----------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req, # Put is actually like a method :-(
                            DriverException(0x500, 'Rotator.Connected failed', ex)).json

@before(PreProcessRequest(maxdev))
class connecting:
    def on_get(self, req: Request, resp: Response, devnum: int):
        try:
            # ------------------------------
            val: bool = tel_dev.connecting
            # ------------------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Connecting failed', ex)).json


@before(PreProcessRequest(maxdev))
class description:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.Description, req).json


@before(PreProcessRequest(maxdev))
class devicestate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return
        try:
            # ----------------------
            val = []
            val.append(StateValue('AtPark', tel_dev.AtPark))
            val.append(StateValue('AtHome', tel_dev.AtHome))
            val.append(StateValue('Declination', tel_dev.DEC))
            val.append(StateValue('IsPulseGuiding', tel_dev.PulseGuiding))
            val.append(StateValue('RightAscension', tel_dev.RA))
            val.append(StateValue('SiderealTime', tel_dev.SiderealTime))
            val.append(StateValue('SideOfPier', tel_dev.SideOfPier))
            val.append(StateValue('Slewing', tel_dev.Slewing))
            val.append(StateValue('Tracking', tel_dev.Tracking))
            val.append(StateValue('UTCDate', tel_dev.UTCDate))
            val.append(StateValue('Altitude', tel_dev.Altitude))
            val.append(StateValue('Azimuth', tel_dev.Azimuth))
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'telescope.Devicestate failed', ex)).json


@before(PreProcessRequest(maxdev))
class disconnect:
    def on_put(self, req: Request, resp: Response, devnum: int):
        try:
            # ---------------------------
            tel_dev.Disconnect()
            # ---------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Disconnect failed', ex)).json


@before(PreProcessRequest(maxdev))
class driverinfo:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.Info, req).json


@before(PreProcessRequest(maxdev))
class interfaceversion:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(
            TelescopeMetadata.InterfaceVersion, req).json


@before(PreProcessRequest(maxdev))
class driverversion():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.Version, req).json


@before(PreProcessRequest(maxdev))
class name():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.Name, req).json


@before(PreProcessRequest(maxdev)) # NOTE : No additional actions implemented
class supportedactions:
    def on_get(self, req: Request, resp: Response, devnum: int):
        # Not PropertyNotImplemented
        resp.text = PropertyResponse([], req).json


@before(PreProcessRequest(maxdev))
class abortslew:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # -----------------------------
            slewing: bool = tel_dev.Slewing
            if slewing:
                tel_dev.AbortSlew()
                resp.text = MethodResponse(req).json
            else:
                resp.text = PropertyResponse(None, req,
                                             InvalidOperationException("Telescope not moving, can't abort slew")).json
            # -----------------------------
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Abortslew failed', ex)).json


@before(PreProcessRequest(maxdev))
class alignmentmode:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: AlignmentModes = tel_dev.AlignmentMode
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Alignmentmode failed', ex)).json


@before(PreProcessRequest(maxdev))
class altitude:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: float = tel_dev.Altitude
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Altitude failed', ex)).json


@before(PreProcessRequest(maxdev))
class aperturearea:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: float = tel_dev.ApertureArea
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Aperturearea failed', ex)).json


@before(PreProcessRequest(maxdev))
class aperturediameter:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: float = tel_dev.ApertureArea
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Aperturediameter failed', ex)).json


@before(PreProcessRequest(maxdev))
class athome:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.AtHome
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Athome failed', ex)).json


@before(PreProcessRequest(maxdev))
class atpark:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.AtPark
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Atpark failed', ex)).json


@before(PreProcessRequest(maxdev))
class axisrates:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        # Raises 400 bad request if missing
        axisstr: str = get_request_field('Axis', req)
        try:
            axis = int(axisstr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Axis {axisstr} not a valid integer.')).json
            return
        if not (axis in [0, 1, 2]):
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Axis {axis} not a valid enum value.')).json
            return

        try:
            # ----------------------
            val: list[float] = tel_dev.AxisRates # NOTE : All axis have the same rates range
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Axisrates failed', ex)).json


@before(PreProcessRequest(maxdev))
class azimuth:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: float = tel_dev.Azimuth
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Azimuth failed', ex)).json


@before(PreProcessRequest(maxdev))
class canfindhome:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.CanFindHome
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Canfindhome failed', ex)).json


@before(PreProcessRequest(maxdev))
class canmoveaxis:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        # Raises 400 bad request if missing
        axisstr: str = get_request_field('Axis', req)
        try:
            axis = int(axisstr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Axis {axisstr} not a valid integer.')).json
            return
        if not axis in [0, 1, 2]:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Axis {axis} not a valid enum value.')).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.CanMoveAxis(axis)
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Canmoveaxis failed', ex)).json


@before(PreProcessRequest(maxdev))
class canpark:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.CanPark
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Canpark failed', ex)).json


@before(PreProcessRequest(maxdev))
class canpulseguide:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.CanPulseGuide
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Canpulseguide failed', ex)).json


@before(PreProcessRequest(maxdev))
class cansetdeclinationrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.CanSetDECRate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Cansetdeclinationrate failed', ex)).json


@before(PreProcessRequest(maxdev))
class cansetguiderates:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.CanSetGuiderates
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Cansetguiderates failed', ex)).json


@before(PreProcessRequest(maxdev))
class cansetpark:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.CanSetPark
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Cansetpark failed', ex)).json


@before(PreProcessRequest(maxdev))
class cansetpierside:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.CanSetPierside
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Cansetpierside failed', ex)).json


@before(PreProcessRequest(maxdev))
class cansetrightascensionrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.CanSetRaRate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Cansetrightascensionrate failed', ex)).json


@before(PreProcessRequest(maxdev))
class cansettracking:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.CanSetTracking
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Cansettracking failed', ex)).json


@before(PreProcessRequest(maxdev))
class canslew:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.CanSlew
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Canslew failed', ex)).json


@before(PreProcessRequest(maxdev))
class canslewaltaz:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.CanSlewAltAz
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Canslewaltaz failed', ex)).json


@before(PreProcessRequest(maxdev))
class canslewaltazasync:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.CanSlewAltAzAsync
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Canslewaltazasync failed', ex)).json


@before(PreProcessRequest(maxdev))
class canslewasync:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.CanSlewAsync
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Canslewasync failed', ex)).json


@before(PreProcessRequest(maxdev))
class cansync:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.CanSync
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Cansync failed', ex)).json


@before(PreProcessRequest(maxdev))
class cansyncaltaz:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.CanSyncAltAz
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Cansyncaltaz failed', ex)).json


@before(PreProcessRequest(maxdev))
class canunpark:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.CanUnpark
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Canunpark failed', ex)).json


@before(PreProcessRequest(maxdev))
class declination:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: float = tel_dev.DEC
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Declination failed', ex)).json


@before(PreProcessRequest(maxdev))
class declinationrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: float = tel_dev.DEC_Rate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Declinationrate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        declinationratestr = get_request_field('DeclinationRate', req)
        # Raises 400 bad request if missing
        if declinationratestr is None or declinationratestr == "":
            resp.text = PropertyResponse(None, req,
                                          DriverException(0x400, 'Missing DeclinationRate field in request.')).json
            return
        try:
            declinationrate = float(declinationratestr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'DeclinationRate {declinationratestr} not a valid number.')).json
            return
        allowed_rates: list[float] = tel_dev.AxisRates
        if not (allowed_rates[1] <= declinationrate <= allowed_rates[0]):
            resp.text = MethodResponse(req,
                                           InvalidValueException(f'Declination rate {declinationrate} not within allowed range {allowed_rates[0]}-{allowed_rates[1]}.')).json
            return
        try:
            # -----------------------------
            if tel_dev.CanSetDECRate: # Set declination rate ONLY if allowed
                tel_dev.DEC_Rate = declinationrate
                resp.text = MethodResponse(req).json
            else:
                resp.text = MethodResponse(req, 
                                           InvalidOperationException('Cannot set declination rate on this telescope.')).json
            # -----------------------------
            
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Declinationrate failed', ex)).json
        ##########
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                            NotConnectedException()).json
            return

        declinationratestr = get_request_field('DeclinationRate', req)  
        # Raises 400 bad request if missing
        if declinationratestr is None or declinationratestr == "":
            resp.text = MethodResponse(req,
                                       DriverException(0x400, 'Missing RightAscensionRate field in request.')).json
            return
        try:
            # -----------------------------
            allowed_rates: list[float] = tel_dev.AxisRates
            declinationrate = float(declinationratestr)
            assert (allowed_rates[0] <= declinationrate <= allowed_rates[1])
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Declination rate {declinationrate} not a valid number.')).json
            return

        try:
            # -----------------------------
            if tel_dev.CanSetRaRate:
                tel_dev.DEC_Rate = declinationrate
                resp.text = MethodResponse(req).json
            else:
                resp.text = MethodResponse(req,
                                           InvalidOperationException("Can't set right ascension rate on this device")).json
            # -----------------------------
            
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Rightascensionrate failed', ex)).json

@before(PreProcessRequest(maxdev)) # NOTE : May have to implement mount mechanical range & endstops checks (yet only RA/DEC natural limits)
class destinationsideofpier:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        # Raises 400 bad request if missing
        rightascensionstr: str = get_request_field('RightAscension', req)
        if rightascensionstr is None or rightascensionstr == "":
            resp.text = MethodResponse(req,
                                       DriverException(0x400, 'Missing RightAscension field in request.')).json
            return
        try:
            rightascension = float(rightascensionstr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'RightAscension {rightascensionstr} not a valid number.')).json
            return
        # RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        if not 0 <= rightascension <= 23.9999999999:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'RightAscension {rightascension} is outside the range [0, 23.9999999999  ].')).json
            return
        
        declinationstr: str = get_request_field('Declination', req)
        # Raises 400 bad request if missing
        if declinationstr is None or declinationstr == "":
            resp.text = MethodResponse(req,
                                       DriverException(0x400, 'Missing Declination field in request.')).json
            return
        try:
            declination = float(declinationstr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Declination {declinationstr} not a valid number.')).json
            return
        # RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        if not -90 <= declination <= 90:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Declination {declination} is outside the range [-90, +90°].')).json
            return
        
        try:
            # ----------------------
            val: PierSide = tel_dev.DestinationSideOfPier(rightascension, declination)
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Destinationsideofpier failed', ex)).json


@before(PreProcessRequest(maxdev))  # TODO : implement put | Yet : returns NotImplementedException
class doesrefraction:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.DoesRefraction
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Doesrefraction failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        # NOTE : Not implemented yet
        resp.text = MethodResponse(req, NotImplementedException()).json
        return
        # # Raises 400 bad request if missing
        # doesrefractionstr = get_request_field('DoesRefraction', req)
        # try:
        #     doesrefraction = to_bool(doesrefractionstr)
        # except:
        #     resp.text = MethodResponse(req,
        #                                InvalidValueException(f'DoesRefraction {doesrefractionstr} not a valid boolean.')).json
        #     return

        # try:
        #     # -----------------------------
        #     ### DEVICE OPERATION(PARAM) ###
        #     # -----------------------------
        #     resp.text = MethodResponse(req).json
        # except Exception as ex:
        #     resp.text = MethodResponse(req,
        #                                DriverException(0x500, 'Telescope.Doesrefraction failed', ex)).json


@before(PreProcessRequest(maxdev))
class equatorialsystem:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: EquatorialCoordinateType = tel_dev.EquatorialSystem
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Equatorialsystem failed', ex)).json


@before(PreProcessRequest(maxdev))
class findhome:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # -----------------------------
            if tel_dev.AtPark:
                resp.text = MethodResponse(req,
                                       ParkedException("Can't move axis while parked")).json
                return
            if tel_dev.CanFindHome:  # Find home ONLY if allowed
                tel_dev.FindHome()
                resp.text = MethodResponse(req).json
            else:
                resp.text = MethodResponse(req,
                                           InvalidOperationException('Cannot find home on this telescope.')).json
            # -----------------------------
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Findhome failed', ex)).json


@before(PreProcessRequest(maxdev))
class focallength:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: float = tel_dev.FocalLength
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Focallength failed', ex)).json


@before(PreProcessRequest(maxdev))
class guideratedeclination:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: float = tel_dev.DECGuideRate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Guideratedeclination failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        guideratedeclinationstr: str = get_request_field(
            'GuideRateDeclination', req)      
        # Raises 400 bad request if missing
        if guideratedeclinationstr is None or guideratedeclinationstr == "":
            resp.text = MethodResponse(req,
                                       DriverException(0x400, 'Missing GuideRateDeclination field in request.')).json
            return
        try:
            guideratedeclination = float(guideratedeclinationstr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'GuideRateDeclination {guideratedeclinationstr} not a valid number.')).json
            return
        # RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        max_rate = tel_dev.AxisRates[0]
        min_rate = tel_dev.AxisRates[1]
        if not min_rate <= guideratedeclination <= max_rate:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'GuideRateDeclination {guideratedeclination} is outside the range [{min_rate}, {max_rate}°/s].')).json
        try:
            # -----------------------------
            if not tel_dev.CanPulseGuide:
                resp.text = MethodResponse(req,
                                           InvalidOperationException('Cannot pulse guide on this telescope.')).json
                return
            if tel_dev.CanSetGuiderates:
                tel_dev.DECGuideRate = guideratedeclination
                resp.text = MethodResponse(req).json
            else:
                resp.text = MethodResponse(req,
                                           InvalidOperationException('Cannot set guide rates on this telescope.')).json
            # -----------------------------
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Guideratedeclination failed', ex)).json


@before(PreProcessRequest(maxdev))
class guideraterightascension:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: float = tel_dev.RAGuideRate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Guideraterightascension failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        guideraterightascensionstr: str = get_request_field(
            'GuideRateRightAscension', req)      
        # Raises 400 bad request if missing
        if guideraterightascensionstr is None or guideraterightascensionstr == "":
            resp.text = MethodResponse(req,
                                       DriverException(0x400, 'Missing GuideRateRightAscension field in request.')).json
            return
        try:
            guideraterightascension = float(guideraterightascensionstr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'GuideRateRightAscension {guideraterightascensionstr} not a valid number.')).json
            return
        # RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        max_rate = tel_dev.AxisRates[0]
        min_rate = tel_dev.AxisRates[1]
        if not min_rate <= guideraterightascension <= max_rate:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'GuideRateRightAscension {guideraterightascension} is outside the range [{min_rate}, {max_rate}°/s].')).json
        try:
            # -----------------------------
            if not tel_dev.CanPulseGuide:
                resp.text = MethodResponse(req,
                                           InvalidOperationException("Can't pulse guide on this device")).json
                return
            if tel_dev.CanSetGuiderates:
                tel_dev.RAGuideRate = guideraterightascension
                resp.text = MethodResponse(req).json
            else:
                resp.text = MethodResponse(req, 
                                           InvalidOperationException("Can't set guiderates on this device")).json
            # -----------------------------
            
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Guideraterightascension failed', ex)).json


@before(PreProcessRequest(maxdev))
class ispulseguiding:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.PulseGuiding
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Ispulseguiding failed', ex)).json


@before(PreProcessRequest(maxdev))
class moveaxis:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        axisstr: str = get_request_field('Axis', req)
        # Raises 400 bad request if missing
        if axisstr is None or axisstr == "":
            resp.text = MethodResponse(req,
                                       DriverException(0x400, 'Missing Axis field in request.')).json
            return
        try:
            axis = int(axisstr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Axis {axisstr} not a valid integer.')).json
            return
        if not axis in [e.value for e in TelescopeAxes]:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Axis {axis} not a valid enum value. Valid axis numbers are : {[e.value for e in TelescopeAxes]}')).json
            return

        ratestr = get_request_field('Rate', req)
        # Raises 400 bad request if missing
        if ratestr is None or ratestr == "":
            resp.text = MethodResponse(req,
                                       DriverException(0x400, 'Missing Rate field in request.')).json
            return
        try:
            rate = float(ratestr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Rate {ratestr} not a valid number.')).json
            return
        
        if tel_dev.AtPark:
            resp.text = MethodResponse(req,
                                       ParkedException("Can't move axis while parked")).json
            return
        
        # Check rate value validity
        valid_rates = tel_dev.AxisRates
        if not valid_rates[0] <= rate <= valid_rates[1]:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Rate {rate} is outside the range [{valid_rates[0]}, {valid_rates[1]}°/s].')).json
            return

        try:
            # -----------------------------
            if tel_dev.CanMoveAxis:
                tel_dev.MoveAxis(axis, rate)
                resp.text = MethodResponse(req).json
            else:
                resp.text = MethodResponse(req,
                                           InvalidOperationException("Can't move axis on this device")).json
            # -----------------------------
            
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Moveaxis failed', ex)).json


@before(PreProcessRequest(maxdev))
class park:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # -----------------------------
            if tel_dev.CanPark:
                if tel_dev.AtPark:
                    resp.text = MethodResponse(req,
                                                InvalidOperationException("Already at park")).json
                else:
                    tel_dev.Park()
                    resp.text = MethodResponse(req).json
            else:
                resp.text = MethodResponse(req,
                                           InvalidOperationException("Can't park on this device")).json
            # -----------------------------
            
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Park failed', ex)).json


@before(PreProcessRequest(maxdev))  # TODO : Guiding not implemented | Yet: returns NotImplementedException
class pulseguide:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        # NOTE: Not implemented yet
        resp.text = MethodResponse(req, NotImplementedException()).json
        return

        # # Raises 400 bad request if missing
        # directionstr = get_request_field('Direction', req)
        # try:
        #     direction = int(directionstr)
        # except:
        #     resp.text = MethodResponse(req,
        #                                InvalidValueException(f'Direction {directionstr} not a valid integer.')).json
        #     return
        # if not direction in [0, 1, 2, 3]:
        #     resp.text = MethodResponse(req,
        #                                InvalidValueException(f'Direction {direction} not a valid enum value.')).json
        #     return

        # # Raises 400 bad request if missing
        # durationstr = get_request_field('Duration', req)
        # try:
        #     duration = int(durationstr)
        # except:
        #     resp.text = MethodResponse(req,
        #                                InvalidValueException(f'Duration {durationstr} not a valid integer.')).json
        #     return
        # # RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        # try:
        #     # -----------------------------
        #     ### DEVICE OPERATION(PARAM) ###
        #     resp.text = MethodResponse(req,
        #                                NotImplementedError(0x500, "Guiding not implemented")).json
        #     # -----------------------------
        #     # resp.text = MethodResponse(req).json
        # except Exception as ex:
        #     resp.text = MethodResponse(req,
        #                                DriverException(0x500, 'Telescope.Pulseguide failed', ex)).json


@before(PreProcessRequest(maxdev))
class rightascension:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: float = tel_dev.RA
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Rightascension failed', ex)).json


@before(PreProcessRequest(maxdev))
class rightascensionrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: float = tel_dev.RA_Rate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Rightascensionrate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        rightascensionratestr: str = get_request_field(
            'RightAscensionRate', req)      
        # Raises 400 bad request if missing
        if rightascensionratestr is None or rightascensionratestr == "":
            resp.text = MethodResponse(req,
                                       DriverException(0x400, 'Missing RightAscensionRate field in request.')).json
            return
        try:
            # -----------------------------
            allowed_rates: list[float] = tel_dev.AxisRates
            rightascensionrate = float(rightascensionratestr)
            assert (allowed_rates[0] <= rightascensionrate <= allowed_rates[1])
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'RightAscensionRate {rightascensionratestr} not a valid number.')).json
            return

        try:
            # -----------------------------
            if tel_dev.CanSetRaRate:
                tel_dev.RA_Rate = rightascensionrate
                resp.text = MethodResponse(req).json
            else:
                resp.text = MethodResponse(req,
                                           InvalidOperationException("Can't set right ascension rate on this device")).json
            # -----------------------------
            
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Rightascensionrate failed', ex)).json


@before(PreProcessRequest(maxdev))  # TODO : set park not implemented | Yet: returns NotImplementedException
class setpark:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return
        # NOTE: Not implemented yet
        resp.text = MethodResponse(req, NotImplementedException()).json
        return

        # try:
        #     # -----------------------------
        #     ### DEVICE OPERATION(PARAM) ###
        #     # -----------------------------
        #     resp.text = MethodResponse(req).json
        # except Exception as ex:
        #     resp.text = MethodResponse(req,
        #                                DriverException(0x500, 'Telescope.Setpark failed', ex)).json


@before(PreProcessRequest(maxdev))
class sideofpier:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: PierSide = tel_dev.SideOfPier
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Sideofpier failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        # Raises 400 bad request if missing
        sideofpierstr: str = get_request_field('SideOfPier', req)
        try:
            allowed_SOP: list[int] = [e.value for e in PierSide]
            sideofpier = int(sideofpierstr)
            if sideofpier not in allowed_SOP:
                raise InvalidOperationException(
                    f'SideOfPier {sideofpier} is not an allowed enum value for this device. Allowed enum values are : {allowed_SOP}')
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'SideOfPier {sideofpierstr} not a valid integer. Allowed SOP are {allowed_SOP}')).json
            return

        try:
            # -----------------------------
            if tel_dev.CanSetPierside:
                tel_dev.SideOfPier = sideofpier
                resp.text = MethodResponse(req).json
            else:
                resp.text = MethodResponse(req,
                                    InvalidOperationException(f"Cannot set side of pier for this device")).json
            # -----------------------------
            
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Sideofpier failed', ex)).json


@before(PreProcessRequest(maxdev))
class siderealtime:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: float = tel_dev.SiderealTime
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Siderealtime failed', ex)).json


@before(PreProcessRequest(maxdev))
class siteelevation:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: float = tel_dev.SiteElevation
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Siteelevation failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        siteelevationstr: str = get_request_field('SiteElevation', req)
        # Raises 400 bad request if missing
        if siteelevationstr is None or siteelevationstr == "":
            resp.text = MethodResponse(req,
                                       DriverException(0x400,'Missing SiteElevation field in request.')).json
            return
        try:
            siteelevation = float(siteelevationstr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'SiteElevation {siteelevationstr} not a valid number.')).json
            return
        if not(-300 < siteelevation < 10000):
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'SiteElevation {siteelevation} is not a valid number between -300 and 10000m.')).json
            return
        try:
            # -----------------------------
            tel_dev.SiteElevation = siteelevation
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Siteelevation failed', ex)).json


@before(PreProcessRequest(maxdev))
class sitelatitude:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val = tel_dev.SiteLatitude
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Sitelatitude failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        sitelatitudestr: str = get_request_field('SiteLatitude', req)
        # Raises 400 bad request if missing
        if sitelatitudestr is None or sitelatitudestr == "":
            resp.text = MethodResponse(req,
                                       DriverException(0x400, 'Missing SiteLatitude field in request.')).json
            return
        try:
            sitelatitude = float(sitelatitudestr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'SiteLatitude {sitelatitudestr} not a valid number.')).json
            return
        if sitelatitude < -90 or sitelatitude > 90:
                resp.text = MethodResponse(req,
                                            InvalidValueException(f'SiteLatitude {sitelatitudestr} is not a valid number in the range [-90, 90].')).json
                return
        
        try:
            # -----------------------------
            tel_dev.SiteLatitude = sitelatitude
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Sitelatitude failed', ex)).json


@before(PreProcessRequest(maxdev))
class sitelongitude:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: float = tel_dev.SiteLongitude
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Sitelongitude failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        sitelongitudestr: str = get_request_field('SiteLongitude', req)
        # Raises 400 bad request if missing
        if sitelongitudestr is None or sitelongitudestr == "":
            resp.text = MethodResponse(req,
                                       DriverException(0x400, 'Missing SiteLongitude field in request.')).json
            return 
        try:
            sitelongitude = float(sitelongitudestr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'SiteLongitude {sitelongitudestr} not a valid number.')).json
            return
        if sitelongitude < -180 or sitelongitude > 180:
                raise InvalidValueException(
                    f'SiteLongitude {sitelongitudestr} is not a valid number in the range [-180, 180].')
        try:
            # -----------------------------
            tel_dev.SiteLongitude = sitelongitude
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Sitelongitude failed', ex)).json


@before(PreProcessRequest(maxdev))
class slewing:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.Slewing
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Slewing failed', ex)).json


@before(PreProcessRequest(maxdev))
class slewsettletime:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: float = tel_dev.SlewSettleTime
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Slewsettletime failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        slewsettletimestr: str = get_request_field('SlewSettleTime', req)
        # Raises 400 bad request if missing
        if slewsettletimestr is None or slewsettletimestr == "":
            resp.text = MethodResponse(req,
                                       InvalidValueException('Missing SlewSettleTime field in request.')).json
            return
        try:
            slewsettletime = int(slewsettletimestr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'SlewSettleTime {slewsettletimestr} not a valid integer.')).json
            return
        # RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        if slewsettletime < 0:
            raise InvalidValueException(
                f'SlewSettleTime {slewsettletimestr} is not a valid number in the range [0, infinity).')
        try:
            # -----------------------------
            tel_dev.SlewSettleTime = slewsettletime
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Slewsettletime failed', ex)).json


@before(PreProcessRequest(maxdev))# 
class slewtoaltaz:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return
    
        # Raises 400 bad request if missing
        azimuthstr: str = get_request_field('Azimuth', req)
        try:
            azimuth = float(azimuthstr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Azimuth {azimuthstr} not a valid number.')).json
            return
        # RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        # Raises 400 bad request if missing
        altitudestr: str = get_request_field('Altitude', req)
        try:
            altitude = float(altitudestr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Altitude {altitudestr} not a valid number.')).json
            return
        if tel_dev.AtPark:
                resp.text = MethodResponse(req,
                                       ParkedException("Can't move axis while parked")).json
                return

        try:
            # -----------------------------
            tel_dev.SlewToAltAz(azimuth, altitude)
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Slewtoaltaz failed', ex)).json


@before(PreProcessRequest(maxdev))
class slewtoaltazasync:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return
    
        # Raises 400 bad request if missing
        azimuthstr: str = get_request_field('Azimuth', req)
        try:
            azimuth = float(azimuthstr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Azimuth {azimuthstr} not a valid number.')).json
            return
        # RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        # Raises 400 bad request if missing
        altitudestr: str = get_request_field('Altitude', req)
        try:
            altitude = float(altitudestr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Altitude {altitudestr} not a valid number.')).json
            return
        if tel_dev.AtPark:
                resp.text = MethodResponse(req,
                                       ParkedException("Can't move axis while parked")).json
                return

        try:
            # -----------------------------
            tel_dev.SlewToAltAz(azimuth, altitude)
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Slewtoaltaz failed', ex)).json


@before(PreProcessRequest(maxdev))
class slewtocoordinates:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        # Raises 400 bad request if missing
        rightascensionstr = get_request_field('RightAscension', req)
        try:
            rightascension = float(rightascensionstr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'RightAscension {rightascensionstr} not a valid number.')).json
            return
        # RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        # Raises 400 bad request if missing
        declinationstr = get_request_field('Declination', req)
        try:
            declination = float(declinationstr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Declination {declinationstr} not a valid number.')).json
            return
        
        if tel_dev.AtPark:
            resp.text = MethodResponse(req,
                                    ParkedException("Can't move axis while parked")).json
            return
        try:
            # -----------------------------
            tel_dev.SlewToCoordinates(rightascension, declination)
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Slewtocoordinates failed', ex)).json


@before(PreProcessRequest(maxdev))
class slewtocoordinatesasync:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        # Raises 400 bad request if missing
        rightascensionstr = get_request_field('RightAscension', req)
        try:
            rightascension = float(rightascensionstr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'RightAscension {rightascensionstr} not a valid number.')).json
            return
        # RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        # Raises 400 bad request if missing
        declinationstr = get_request_field('Declination', req)
        try:
            declination = float(declinationstr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Declination {declinationstr} not a valid number.')).json
            return
        
        if tel_dev.AtPark:
            resp.text = MethodResponse(req,
                                    ParkedException("Can't move axis while parked")).json
            return
        try:
            # -----------------------------
            tel_dev.SlewToCoordinates(rightascension, declination)
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Slewtocoordinates failed', ex)).json


@before(PreProcessRequest(maxdev))
class slewtotarget:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return
    
        try:
            # -----------------------------
            if tel_dev.AtPark:
                resp.text = MethodResponse(req,
                                       ParkedException("Can't move axis while parked")).json
                return
            
            tel_dev.SlewToTarget()
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Slewtotarget failed', ex)).json


@before(PreProcessRequest(maxdev))
class slewtotargetasync:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return
    
        try:
            # -----------------------------
            if tel_dev.AtPark:
                resp.text = MethodResponse(req,
                                       ParkedException("Can't move axis while parked")).json
                return
            
            tel_dev.SlewToTarget()
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Slewtotarget failed', ex)).json


@before(PreProcessRequest(maxdev))
class synctoaltaz:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        azimuthstr: str = get_request_field('Azimuth', req)
        # Raises 400 bad request if missing
        if azimuthstr is None or azimuthstr == '':
            resp.text = MethodResponse(req,
                                           DriverException(0x400, 'Azimuth is required')).json
            return
        try:
            azimuth = float(azimuthstr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Azimuth {azimuthstr} not a valid number.')).json
            return
        if not (-180 <= azimuth <= 180): # NOTE Check if azimuth is in the range [-180, 180]
            resp.text = MethodResponse(req,
                                           InvalidValueException(f'Azimuth {azimuth} is out of range (-180, 180)')).json
            return
        
        altitudestr: str = get_request_field('Altitude', req)
        # Raises 400 bad request if missing
        if altitudestr is None or altitudestr == '':
            resp.text = MethodResponse(req,
                                           DriverException(0x400, 'Altitude is required')).json
            return
        try:
            altitude = float(altitudestr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Altitude {altitudestr} not a valid number.')).json
            return
        if not (0 <= altitude <= 90): # NOTE Check if altitude is in the range [0, 90]
            resp.text = MethodResponse(req,
                                           InvalidValueException(f'Altitude {altitude} is out of range (-90, 90)')).json
            return
        
        try:
            # -----------------------------
            if tel_dev.CanSyncAltAz:
                tel_dev.SyncToAltAz(azimuth, altitude)
                resp.text = MethodResponse(req).json
            else:
                resp.text = MethodResponse(req,
                                           InvalidValueException('SyncToAltAz not supported by this telescope')).json
                return
            # -----------------------------
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Synctoaltaz failed', ex)).json


@before(PreProcessRequest(maxdev))
class synctocoordinates:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        rightascensionstr = get_request_field('RightAscension', req)
        # Raises 400 bad request if missing
        if rightascensionstr is None or rightascensionstr == '':
            resp.text = MethodResponse(req,
                                           DriverException(0x400, 'RightAscension is required')).json
            return
        try:
            rightascension = float(rightascensionstr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'RightAscension {rightascensionstr} not a valid number.')).json
            return
        if not (0 <= rightascension <= 23.999999): # NOTE Check if right ascension is in the range [0, 24)
            resp.text = MethodResponse(req,
                                           InvalidValueException(f'RightAscension {rightascension} is out of range (0, 24)')).json
            return

        declinationstr: str = get_request_field('Declination', req)
        # Raises 400 bad request if missing
        if declinationstr is None or declinationstr == '':
            resp.text = MethodResponse(req,
                                           DriverException(0x400, 'Declination is required')).json
            return
        try:
            declination = float(declinationstr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Declination {declinationstr} not a valid number.')).json
            return
        if not (-90 <= declination <= 90): # NOTE Check if declination is in the range [-90, 90]
            resp.text = MethodResponse(req,
                                           InvalidValueException(f'Declination {declination} is out of range (-90, 90)')).json
            return
        try:
            # -----------------------------
            if tel_dev.CanSync:
                tel_dev.SyncToCoordinates(rightascension, declination)
                resp.text = MethodResponse(req).json
            else:
                resp.text = MethodResponse(req,
                                           InvalidOperationException('SyncToCoordinates not supported by this telescope')).json
                return
            # -----------------------------
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Synctocoordinates failed', ex)).json


@before(PreProcessRequest(maxdev))
class synctotarget:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return
    
        try:
            # -----------------------------
            if tel_dev.CanSyncToTarget:
                tel_dev.SyncToTarget()
                resp.text = MethodResponse(req).json
            else:
                resp.text = MethodResponse(req,
                                           InvalidOperationException('SyncToTarget not supported by this telescope')).json
                return
            # -----------------------------
            
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Synctotarget failed', ex)).json


@before(PreProcessRequest(maxdev)) # NOTE : May have to limit limit to prevent mechanical interferences
class targetdeclination:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: float = tel_dev.TargetDeclination
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Targetdeclination failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        targetdeclinationstr = get_request_field(
            'TargetDeclination', req)      
        # Raises 400 bad request if missing
        if targetdeclinationstr is None or targetdeclinationstr == '':
            resp.text = MethodResponse(req,
                                           DriverException(0x400, 'TargetDeclination is required')).json
            return
        
        try:
            targetdeclination = float(targetdeclinationstr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'TargetDeclination {targetdeclinationstr} not a valid number.')).json
            return
        if not (-90 <= targetdeclination <= 90):
            resp.text = MethodResponse(req,
                                           InvalidValueException(f'TargetDeclination {targetdeclination} is out of range (-90, 90)')).json
        try:
            # -----------------------------
            tel_dev.TargetRightAscension = targetdeclination
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Targetdeclination failed', ex)).json


@before(PreProcessRequest(maxdev)) # NOTE : May have to limit limit to prevent mechanical interferences
class targetrightascension:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: float = tel_dev.TargetRightAscension
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Targetrightascension failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        targetrightascensionstr: str = get_request_field(
            'TargetRightAscension', req)      
        # Raises 400 bad request if missing
        if targetrightascensionstr is None or targetrightascensionstr == '':
            resp.text = MethodResponse(req,
                                           DriverException(0x400, 'TargetRightAscension is required')).json
            return
        try:
            targetrightascension = float(targetrightascensionstr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'TargetRightAscension {targetrightascensionstr} not a valid number.')).json
            return
        if not (0 <= targetrightascension <= 23.999999):
            resp.text = MethodResponse(req,
                                           InvalidValueException(f'TargetRightAscension {targetrightascension} is out of range (0, 24)')).json
        try:
            # -----------------------------
            tel_dev.TargetRightAscension = targetrightascension
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Targetrightascension failed', ex)).json


@before(PreProcessRequest(maxdev))
class tracking:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: bool = tel_dev.Tracking
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Tracking failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        # Raises 400 bad request if missing
        trackingstr: str = get_request_field('Tracking', req)
        try:
            tracking: bool = to_bool(trackingstr)
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'Tracking {trackingstr} not a valid boolean.')).json
            return

        try:
            # -----------------------------
            if tel_dev.AtPark:
                resp.text = MethodResponse(req,
                                           ParkedException("Can't move axis while parked")).json
                return
            if tel_dev.CanSetTracking:
                tel_dev.Tracking = tracking 
                resp.text = MethodResponse(req).json
            else:
                resp.text = MethodResponse(req,
                                           InvalidOperationException('Tracking control is not supported by the telescope.')).json
            # -----------------------------
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Tracking failed', ex)).json


@before(PreProcessRequest(maxdev))
class trackingrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: float = tel_dev.TrackingRate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Trackingrate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        trackingratestr: str = get_request_field('TrackingRate', req)
        # Raises 400 bad request if missing
        if trackingratestr is None or trackingratestr == '':
            resp.text = MethodResponse(req,
                                           DriverException(0x400, 'TrackingRate is required')).json
        try:
            allowed_rates = [e.value for e in DriveRates]
            trackingrate = int(trackingratestr)
            if trackingrate not in allowed_rates:
                resp.text = MethodResponse(req,
                                               InvalidValueException(f'TrackingRate {trackingratestr} is not a valid rate. Supported rates are: {allowed_rates}.')).json
                return
        except:
            resp.text = MethodResponse(req,
                                       InvalidValueException(f'TrackingRate {trackingratestr} not a valid integer.')).json
            return
        
        try:
            # -----------------------------
            tel_dev.TrackingRate = trackingrate
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Trackingrate failed', ex)).json


@before(PreProcessRequest(maxdev))
class trackingrates:

    def on_get(self, req: Request, resp: Response, devnum: int) -> None:
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: list[DriveRates] = tel_dev.TrackingRates
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Trackingrates failed', ex)).json


@before(PreProcessRequest(maxdev)) # TODO : format utc date correctly and verify format
class utcdate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # ----------------------
            val: str = tel_dev.UTCDate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                                         DriverException(0x500, 'Telescope.Utcdate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        utcdate: str = get_request_field('UTCDate', req)
        # Raises 400 bad request if missing
        if utcdate is None or utcdate == '':
            resp.text = MethodResponse(req,
                                           DriverException(0x400, 'UTCDate is required')).json
            return
        try:
            # -----------------------------
            tel_dev.UTCDate = utcdate
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Utcdate failed', ex)).json


@before(PreProcessRequest(maxdev))
class unpark:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                                         NotConnectedException()).json
            return

        try:
            # -----------------------------
            if tel_dev.CanUnpark:
                if not tel_dev.AtPark:
                    resp.text = MethodResponse(req,
                                           InvalidOperationException("Telescope is not parked")).json
                    return
                tel_dev.Unpark()  
                resp.text = MethodResponse(req).json
            else:
                resp.text = MethodResponse(req,
                                               InvalidValueException('Unparking is not supported by this telescope.')).json
            # -----------------------------
        except Exception as ex:
            resp.text = MethodResponse(req,
                                       DriverException(0x500, 'Telescope.Unpark failed', ex)).json
