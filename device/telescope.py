
# -*- coding: utf-8 -*-
#
# -----------------------------------------------------------------------------
# telescope.py - Alpaca API responders for Telescope
#
# Author:   Your R. Name <your@email.org> (abc)
#
# -----------------------------------------------------------------------------
# Edit History:
#   Generated by Python Interface Generator for AlpycaDevice
#
# ??-???-????   abc Initial edit

from falcon import Request, Response, HTTPBadRequest, before
from logging import Logger
from shr import PropertyResponse, MethodResponse, PreProcessRequest, \
                StateValue, get_request_field, to_bool
from exceptions import *        # Nothing but exception classes
from telescopedevice import TelescopeDevice

logger: Logger
    
# ----------------------
# MULTI-INSTANCE SUPPORT
# ----------------------
# If this is > 0 then it means that multiple devices of this type are supported.
# Each responder on_get() and on_put() is called with a devnum parameter to indicate
# which instance of the device (0-based) is being called by the client. Leave this
# set to 0 for the simple case of controlling only one instance of this device type.
#
maxdev = 0                      # Single instance

# -----------
# DEVICE INFO
# -----------
# Static metadata not subject to configuration changes
## EDIT FOR YOUR DEVICE ##
class TelescopeMetadata:
    """ Metadata describing the Telescope Device. Edit for your device"""
    Name = 'Sample Telescope'
    Version = '##DRIVER VERSION AS STRING##'
    Description = 'My ASCOM Telescope'
    DeviceType = 'Telescope'
    DeviceID = '##GENERATE A NEW GUID AND PASTE HERE##' # https://guidgenerator.com/online-guid-generator.aspx
    Info = 'Alpaca Sample Device\nImplements ITelescope\nASCOM Initiative'
    MaxDeviceNumber = maxdev
    InterfaceVersion = 4 ##YOUR DEVICE INTERFACE VERSION##        # ITelescopeVxxx

tel_dev: TelescopeDevice
# At app init not import :-)
def start_tel_device(logger: Logger):
    logger = logger
    global tel_dev
    tel_dev = TelescopeDevice(logger) # TODO : changer les proprietes configurables
    tel_dev.can_reverse = Config.can_reverse
    tel_dev.step_size = Config.step_size
    tel_dev.steps_per_sec = Config.steps_per_sec
    tel_dev.sync_write_connected = Config.sync_write_connected

# --------------------
# RESOURCE CONTROLLERS
# --------------------

@before(PreProcessRequest(maxdev)) 
class action:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev)) 
class commandblind:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev)) 
class commandbool:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev)) 
class commandstring:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev)) 
class connect:
    def on_put(self, req: Request, resp: Response, devnum: int):
        try:
            # ------------------------
            tel_dev.Connect()
            # ------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Connect failed', ex)).json


@before(PreProcessRequest(maxdev)) 
class connected:
    def on_get(self, req: Request, resp: Response, devnum: int):
        try:
            # -------------------------------------
            is_connecting: bool = tel_dev.connected
            # -------------------------------------
            resp.text = PropertyResponse(is_connecting, req).json
        except Exception as ex:
            resp.text = MethodResponse(req, DriverException(0x500, 'Telescope.Connected failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class connecting:
    def on_get(self, req: Request, resp: Response, devnum: int):
        try:
            # ------------------------------
            val = tel_dev.connecting
            # ------------------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Connecting failed', ex)).json

@before(PreProcessRequest(maxdev))
class description:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.Description, req).json

@before(PreProcessRequest(maxdev)) # TODO : to complete
class devicestate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = []
            # val.append(StateValue('## NAME ##', ## GET VAL ##))
            # Repeat for each of the operational states per the device spec
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'telescope.Devicestate failed', ex)).json

@before(PreProcessRequest(maxdev))
class disconnect:
    def on_put(self, req: Request, resp: Response, devnum: int):
        try:
            # ---------------------------
            tel_dev.Disconnect()
            # ---------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Disconnect failed', ex)).json

@before(PreProcessRequest(maxdev))
class driverinfo:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.Info, req).json

@before(PreProcessRequest(maxdev))
class interfaceversion:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.InterfaceVersion, req).json

@before(PreProcessRequest(maxdev))
class driverversion():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.Version, req).json

@before(PreProcessRequest(maxdev))
class name():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.Name, req).json

@before(PreProcessRequest(maxdev)) 
class supportedactions:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse([], req).json  # Not PropertyNotImplemented

@before(PreProcessRequest(maxdev)) 
class abortslew:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # -----------------------------
            tel_dev.AbortSlew()
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Abortslew failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class alignmentmode:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.AlignmentMode
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Alignmentmode failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class altitude:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.Altitude
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Altitude failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class aperturearea:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.ApertureArea
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Aperturearea failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class aperturediameter:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.ApertureArea
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Aperturediameter failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class athome:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val =  tel_dev.AtHome
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Athome failed', ex)).json

@before(PreProcessRequest(maxdev))
class atpark:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.AtPark
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Atpark failed', ex)).json

@before(PreProcessRequest(maxdev))
class axisrates:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        axisstr = get_request_field('Axis', req)      # Raises 400 bad request if missing
        try:
            axis = int(axisstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Axis {axisstr} not a valid integer.')).json
            return
        if not axis in [0, 1, 2]:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Axis {axis} not a valid enum value.')).json
            return

        try:
            # ----------------------
            val = tel_dev.AxisRates(axis)
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Axisrates failed', ex)).json

@before(PreProcessRequest(maxdev))
class azimuth:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.Azimuth
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Azimuth failed', ex)).json

@before(PreProcessRequest(maxdev))
class canfindhome:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.CanFindHome
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canfindhome failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class canmoveaxis:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        axisstr = get_request_field('Axis', req)      # Raises 400 bad request if missing
        try:
            axis = int(axisstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Axis {axisstr} not a valid integer.')).json
            return
        if not axis in [0, 1, 2]:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Axis {axis} not a valid enum value.')).json
            return

        try:
            # ----------------------
            val = tel_dev.CanMoveAxis(axis)
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canmoveaxis failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class canpark:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.CanPark
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canpark failed', ex)).json

@before(PreProcessRequest(maxdev))
class canpulseguide:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.CanPulseGuide
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canpulseguide failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansetdeclinationrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.CanSetDECRate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansetdeclinationrate failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansetguiderates:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.CanSetGuiderates
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansetguiderates failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class cansetpark:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.CanSetPark
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansetpark failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class cansetpierside:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.CanSetPierside
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansetpierside failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansetrightascensionrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.CanSetRaRate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansetrightascensionrate failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansettracking:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.CanSetTracking
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansettracking failed', ex)).json

@before(PreProcessRequest(maxdev))
class canslew:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.CanSlew
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canslew failed', ex)).json

@before(PreProcessRequest(maxdev)) # TODO Handle can = false
class canslewaltaz:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.CanSlewAltaz
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canslewaltaz failed', ex)).json

@before(PreProcessRequest(maxdev)) # TODO Handle can = false
class canslewaltazasync:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.CanSlewAltazAsync
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canslewaltazasync failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class canslewasync:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.CanSlewAsync
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canslewasync failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class cansync:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.CanSync
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansync failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class cansyncaltaz:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.CanSyncAltaz
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansyncaltaz failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class canunpark:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.CanUnpark
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canunpark failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class declination:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.DEC
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Declination failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class declinationrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.DEC_Rate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Declinationrate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        declinationratestr = get_request_field('DeclinationRate', req)      # Raises 400 bad request if missing
        try:
            declinationrate = float(declinationratestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'DeclinationRate {declinationratestr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            tel_dev.DEC_Rate = declinationrate
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Declinationrate failed', ex)).json

@before(PreProcessRequest(maxdev)) # TODO : implement get and set
class destinationsideofpier:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        rightascensionstr = get_request_field('RightAscension', req)      # Raises 400 bad request if missing
        try:
            rightascension = float(rightascensionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'RightAscension {rightascensionstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        declinationstr = get_request_field('Declination', req)      # Raises 400 bad request if missing
        try:
            declination = float(declinationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Declination {declinationstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # ----------------------
            val = ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Destinationsideofpier failed', ex)).json

@before(PreProcessRequest(maxdev)) # TODO : implement put
class doesrefraction:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.DoesRefraction
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Doesrefraction failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        doesrefractionstr = get_request_field('DoesRefraction', req)      # Raises 400 bad request if missing
        try:
            doesrefraction = to_bool(doesrefractionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'DoesRefraction {doesrefractionstr} not a valid boolean.')).json
            return

        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Doesrefraction failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class equatorialsystem:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.EquatorialSystem
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Equatorialsystem failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class findhome:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # -----------------------------
            tel_dev.FindHome()
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Findhome failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class focallength:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.FocalLength
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Focallength failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class guideratedeclination:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.DECGuideRate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Guideratedeclination failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        guideratedeclinationstr = get_request_field('GuideRateDeclination', req)      # Raises 400 bad request if missing
        try:
            guideratedeclination = float(guideratedeclinationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'GuideRateDeclination {guideratedeclinationstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            tel_dev.DECGuideRate = guideratedeclination
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Guideratedeclination failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class guideraterightascension:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.RAGuideRate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Guideraterightascension failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        guideraterightascensionstr = get_request_field('GuideRateRightAscension', req)      # Raises 400 bad request if missing
        try:
            guideraterightascension = float(guideraterightascensionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'GuideRateRightAscension {guideraterightascensionstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            tel_dev.RAGuideRate = guideraterightascension
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Guideraterightascension failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class ispulseguiding:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.IsPulseGuiding
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Ispulseguiding failed', ex)).json

@before(PreProcessRequest(maxdev)) # TODO : implement get and put methods
class moveaxis:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        axisstr = get_request_field('Axis', req)      # Raises 400 bad request if missing
        try:
            axis = int(axisstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Axis {axisstr} not a valid integer.')).json
            return
        if not axis in [0, 1, 2]:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Axis {axis} not a valid enum value.')).json
            return

        ratestr = get_request_field('Rate', req)      # Raises 400 bad request if missing
        try:
            rate = float(ratestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Rate {ratestr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Moveaxis failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class park:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # -----------------------------
            tel_dev.Park()
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Park failed', ex)).json

@before(PreProcessRequest(maxdev)) # TODO : Guiding not implemented yet
class pulseguide:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        directionstr = get_request_field('Direction', req)      # Raises 400 bad request if missing
        try:
            direction = int(directionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Direction {directionstr} not a valid integer.')).json
            return
        if not direction in [0, 1, 2, 3]:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Direction {direction} not a valid enum value.')).json
            return

        durationstr = get_request_field('Duration', req)      # Raises 400 bad request if missing
        try:
            duration = int(durationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Duration {durationstr} not a valid integer.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            resp.text = MethodResponse(req,
                            NotImplementedError(0x500, "Guiding not implemented")).json
            # -----------------------------
            #resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Pulseguide failed', ex)).json

@before(PreProcessRequest(maxdev))
class rightascension:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.RA
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Rightascension failed', ex)).json

@before(PreProcessRequest(maxdev))
class rightascensionrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.RA_Rate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Rightascensionrate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        rightascensionratestr = get_request_field('RightAscensionRate', req)      # Raises 400 bad request if missing
        try:
            rightascensionrate = float(rightascensionratestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'RightAscensionRate {rightascensionratestr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            tel_dev.RA_Rate = rightascensionrate
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Rightascensionrate failed', ex)).json

@before(PreProcessRequest(maxdev)) # TODO
class setpark:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Setpark failed', ex)).json

@before(PreProcessRequest(maxdev)) # TODO : handle "can set SOP = False"
class sideofpier:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.SideOfPier
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Sideofpier failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        sideofpierstr = get_request_field('SideOfPier', req)      # Raises 400 bad request if missing
        try:
            sideofpier = int(sideofpierstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SideOfPier {sideofpierstr} not a valid integer.')).json
            return
        if not sideofpier in [0, 1, -1]:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SideOfPier {sideofpier} not a valid enum value.')).json
            return

        try:
            # -----------------------------
            #tel_dev.SideOfPier = sideofpier  # TODO: update telescope property | Handle exceptions 
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Sideofpier failed', ex)).json

@before(PreProcessRequest(maxdev))
class siderealtime:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.SiderealTime
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Siderealtime failed', ex)).json

@before(PreProcessRequest(maxdev)) # TODO : handle "can set elevation = False"
class siteelevation:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.SiteElevation
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Siteelevation failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        siteelevationstr = get_request_field('SiteElevation', req)      # Raises 400 bad request if missing
        try:
            siteelevation = float(siteelevationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SiteElevation {siteelevationstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            tel_dev.SiteElevation = siteelevation  # TODO: update telescope property | Handle exceptions  
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Siteelevation failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class sitelatitude:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.SiteLatitude
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Sitelatitude failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        sitelatitudestr = get_request_field('SiteLatitude', req)      # Raises 400 bad request if missing
        try:
            sitelatitude = float(sitelatitudestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SiteLatitude {sitelatitudestr} not a valid number.')).json
            return
        ###! RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            tel_dev.SiteLatitude = sitelatitude
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Sitelatitude failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class sitelongitude:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.SiteLongitude
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Sitelongitude failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        sitelongitudestr = get_request_field('SiteLongitude', req)      # Raises 400 bad request if missing
        try:
            sitelongitude = float(sitelongitudestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SiteLongitude {sitelongitudestr} not a valid number.')).json
            return
        ###! RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            tel_dev.SiteLongitude = sitelongitude
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Sitelongitude failed', ex)).json

@before(PreProcessRequest(maxdev)) # TODO : implement get and put
class slewing:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Slewing failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewsettletime:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.SlewSettleTime
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Slewsettletime failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        slewsettletimestr = get_request_field('SlewSettleTime', req)      # Raises 400 bad request if missing
        try:
            slewsettletime = int(slewsettletimestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SlewSettleTime {slewsettletimestr} not a valid integer.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            tel_dev.SlewSettleTime = slewsettletime
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewsettletime failed', ex)).json

@before(PreProcessRequest(maxdev)) # TODO : check conditions and handle exceptions
class slewtoaltaz:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        azimuthstr = get_request_field('Azimuth', req)      # Raises 400 bad request if missing
        try:
            azimuth = float(azimuthstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Azimuth {azimuthstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        altitudestr = get_request_field('Altitude', req)      # Raises 400 bad request if missing
        try:
            altitude = float(altitudestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Altitude {altitudestr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            tel_dev.SlewToAltAz(azimuth, altitude)
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtoaltaz failed', ex)).json

@before(PreProcessRequest(maxdev)) # TODO : check conditions and handle exceptions
class slewtoaltazasync:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        azimuthstr = get_request_field('Azimuth', req)      # Raises 400 bad request if missing
        try:
            azimuth = float(azimuthstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Azimuth {azimuthstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        altitudestr = get_request_field('Altitude', req)      # Raises 400 bad request if missing
        try:
            altitude = float(altitudestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Altitude {altitudestr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            tel_dev.SlewToAltAzAsync(azimuth, altitude)
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtoaltazasync failed', ex)).json

@before(PreProcessRequest(maxdev)) # TODO : check conditions and handle exceptions
class slewtocoordinates:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        rightascensionstr = get_request_field('RightAscension', req)      # Raises 400 bad request if missing
        try:
            rightascension = float(rightascensionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'RightAscension {rightascensionstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        declinationstr = get_request_field('Declination', req)      # Raises 400 bad request if missing
        try:
            declination = float(declinationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Declination {declinationstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            tel_dev.SlewToCoordinates(rightascension, declination)
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtocoordinates failed', ex)).json

@before(PreProcessRequest(maxdev)) # TODO : check conditions and handle exceptions
class slewtocoordinatesasync:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        rightascensionstr = get_request_field('RightAscension', req)      # Raises 400 bad request if missing
        try:
            rightascension = float(rightascensionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'RightAscension {rightascensionstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        declinationstr = get_request_field('Declination', req)      # Raises 400 bad request if missing
        try:
            declination = float(declinationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Declination {declinationstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            tel_dev.SlewToCoordinatesAsync(rightascension, declination)
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtocoordinatesasync failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewtotarget:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # -----------------------------
            tel_dev.SlewToTarget()
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtotarget failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewtotargetasync:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # -----------------------------
            tel_dev.SlewToTargetAsync()
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtotargetasync failed', ex)).json

@before(PreProcessRequest(maxdev))
class synctoaltaz:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        azimuthstr = get_request_field('Azimuth', req)      # Raises 400 bad request if missing
        try:
            azimuth = float(azimuthstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Azimuth {azimuthstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        altitudestr = get_request_field('Altitude', req)      # Raises 400 bad request if missing
        try:
            altitude = float(altitudestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Altitude {altitudestr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            tel_dev.SyncToAltAz(azimuth, altitude)
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Synctoaltaz failed', ex)).json

@before(PreProcessRequest(maxdev))
class synctocoordinates:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        rightascensionstr = get_request_field('RightAscension', req)      # Raises 400 bad request if missing
        try:
            rightascension = float(rightascensionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'RightAscension {rightascensionstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        declinationstr = get_request_field('Declination', req)      # Raises 400 bad request if missing
        try:
            declination = float(declinationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Declination {declinationstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            tel_dev.SyncToCoordinates(rightascension, declination)
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Synctocoordinates failed', ex)).json

@before(PreProcessRequest(maxdev))
class synctotarget:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # -----------------------------
            tel_dev.SyncToTarget()
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Synctotarget failed', ex)).json

@before(PreProcessRequest(maxdev))
class targetdeclination:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.TargetDeclination
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Targetdeclination failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        targetdeclinationstr = get_request_field('TargetDeclination', req)      # Raises 400 bad request if missing
        try:
            targetdeclination = float(targetdeclinationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'TargetDeclination {targetdeclinationstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            tel_dev.TargetRightAscension = targetrightascension
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Targetdeclination failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class targetrightascension:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.TargetRightAscension
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Targetrightascension failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        targetrightascensionstr = get_request_field('TargetRightAscension', req)      # Raises 400 bad request if missing
        try:
            targetrightascension = float(targetrightascensionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'TargetRightAscension {targetrightascensionstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            tel_dev.TargetRightAscension = targetrightascension
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Targetrightascension failed', ex)).json

@before(PreProcessRequest(maxdev))
class tracking:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.Tracking
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Tracking failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        trackingstr = get_request_field('Tracking', req)      # Raises 400 bad request if missing
        try:
            tracking = to_bool(trackingstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Tracking {trackingstr} not a valid boolean.')).json
            return

        try:
            # -----------------------------
            tel_dev.Tracking = tracking  # TODO: Implement tracking control. Raise Alpaca InvalidValueException if not supported by the telescope.  # Example: tel_dev.Tracking = True if tracking else False  # Note: This is a placeholder, actual implementation may vary.  # TODO: Implement tracking control. Raise Alpaca InvalidValueException if not supported by the telescope.  # Example: tel_dev.Tracking = True if tracking else False  # Note: This is a placeholder, actual implementation may vary.  # TODO: Implement tracking control. Raise Alpaca InvalidValueException if not supported by the telescope.  # Example: tel_dev.Tracking = True if tracking else False  # Note: This is a placeholder, actual implementation may vary.  # TODO: Implement tracking control. Raise Alpaca InvalidValueException if not supported by the telescope.  # Example: tel_dev.Tracking = True if tracking
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Tracking failed', ex)).json

@before(PreProcessRequest(maxdev)) 
class trackingrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.TrackingRate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Trackingrate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        trackingratestr = get_request_field('TrackingRate', req)      # Raises 400 bad request if missing
        try:
            trackingrate = int(trackingratestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'TrackingRate {trackingratestr} not a valid integer.')).json
            return
        ### RANGE CHECK AS NEEDED ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            tel_dev.TrackingRate = trackingrate  # TODO: Implement tracking rate control. Raise Alpaca InvalidValueException if not supported by the telescope.  # Example: tel_dev.TrackingRate = trackingrate  # Note: This is a placeholder, actual implementation may vary.  # TODO: Implement tracking rate control. Raise Alpaca InvalidValueException if not supported by the telescope.  # Example: tel_dev.TrackingRate = trackingrate  # Note: This is a placeholder, actual implementation may vary.  # TODO: Implement tracking rate control. Raise Alpaca InvalidValueException if not supported by the telescope.  # Example: tel_dev.TrackingRate = trackingrate  # Note: This is a placeholder, actual implementation may vary.  # TODO: Implement tracking rate control. Raise Alpaca InvalidValueException if not supported by the telescope.  # Example: tel_dev.TrackingRate = trackingrate
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Trackingrate failed', ex)).json

@before(PreProcessRequest(maxdev))
class trackingrates:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.TrackingRates
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Trackingrates failed', ex)).json

@before(PreProcessRequest(maxdev))
class utcdate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = tel_dev.UTCDate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Utcdate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        utcdate = get_request_field('UTCDate', req)         # Raises 400 bad request if missing
        ### INTEPRET AS NEEDED OR FAIL ###  # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            tel_dev.UTCDate = utcdate  # TODO: Implement setting UTC date. Raise Alpaca InvalidValueException if not supported by the telescope.  # Example: tel_dev
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Utcdate failed', ex)).json

@before(PreProcessRequest(maxdev))
class unpark:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # -----------------------------
            tel_dev.Unpark()  # TODO: Implement unparking. Raise Alpaca InvalidValueException if not supported by the telescope.  # Example: tel_dev.Unpark()  # Note: This is a placeholder, actual implementation may vary.  # TODO: Implement unparking. Raise Alpaca InvalidValueException if not supported by the telescope.  # Example: tel_dev.Unpark()  # Note: This is a placeholder, actual implementation may vary.  # TODO: Implement unparking. Raise Alpaca InvalidValueException if not supported by the telescope.  # Example: tel_dev.Unpark()  # Note: This is a placeholder, actual implementation may vary.  # TODO: Implement unparking. Raise Alpaca InvalidValueException if not supported by the telescope.  # Example: tel_dev.Unpark()  # Note: This is a placeholder, actual
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Unpark failed', ex)).json

